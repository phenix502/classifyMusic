{
    "contents" : "基于随机森林算法的歌词分类研究\n========================================================\n\n本文档详细介绍如何使用R语言，进行文本情感分类研究。\n\n## 1 加载包\n\n各个package的主要功能如下：\n\n+ tm 形成文档词条矩阵\n+ Rwordseg 中文分词\n+ FSelector 特征提取，有chi-square，information gain等等\n+ RTextTools 文本挖掘分类算法\n\n```{r}\nlibrary(tm)\nlibrary(Rwordseg)\nlibrary(RTextTools)\nlibrary(FSelector)\n\n```\n\n## 2 读取歌词文本\n\n读入工作目录下的`sweetsong.csv`和`sadsong.csv`文件，分别为甜蜜歌词和伤感歌词\n```{r}\n# 防止读入的所有string都被当成factor\noptions(stringsAsFactors=FALSE)\n# 读入csv文件\nInfor.sweet <- read.csv('material/sweetsong.csv', header=TRUE)\nInfor.sad <- read.csv('material/sadsong.csv', header=TRUE)\n\n```\n\n## 3 分词并形成语料库\n```{r}\n## 由两个character类型的变量\n## 形成语料库\nremoveEnglish <- function(x){\n  gsub(\"[a-z]+|[A-Z]+\",\"\",x)\n}\n\nmakeCorpus <- function(str1, str2){\n# 伤感歌曲分词   组成语料库\nword.sad <- lapply(str1,removeEnglish)\nword.sad <- lapply(word.sad,segmentCN)\ncorpus.sad <- Corpus(VectorSource(word.sad))\n\n# 甜蜜歌曲分词   组成语料库\nword.sweet <- lapply(str2, removeEnglish)\nword.sweet <- lapply(word.sweet, segmentCN)\ncorpus.sweet <- Corpus(VectorSource(word.sweet))\n\n# 合成预料库\ncorpus <- c(corpus.sad, corpus.sweet)\nreturn(corpus)\n}\n\ncorpus <- makeCorpus(Infor.sweet$lyric, Infor.sad$lyric)\n```\n\n\n\n\n\n## 3 documet-term matrix 函数实现\n要将文本信息转为可以给各种分类计算的信息，首先要把文本信息转为各种能计算的数字。document-term matrix每一列是一个词语，每一行是词频数，当然一般用TF-IDF作为特征权值计算。\n```{r}\ndtm <- function(corpus, tfidf = FALSE){\n  \n  ## 读取停止词\n  mystopwords <- readLines(\"stopwords.txt\")\n  if (tfidf==TRUE){\n    ## 文档-词矩阵 词的长度大于1就纳入矩阵\n    cor.dtm <- DocumentTermMatrix(corpus, control=list( wordLengths = c(2, Inf),\n                                                     stopwords=mystopwords,\n                                                     weighting = weightTfIdf))\n  }\n  else{\n    cor.dtm <- DocumentTermMatrix(corpus, control=list( wordLengths = c(2, Inf),\n                                                     stopwords=mystopwords))\n  }\n  ##去掉稀疏矩阵中低频率的词\n  cor.dtm <- removeSparseTerms(cor.dtm, 0.98)\n  \n  ## 使得每一行至少有一个词不为0\n  #rowTotals <- apply(cor.dtm, 1, sum)\n  #cor.dtm <- cor.dtm[rowTotals > 0]\n  return (cor.dtm)\n}\n\n```\n\n利用`dtm`函数，形成为文本词条矩阵\n```{r}\ncorpus.dtm <- dtm(corpus)\ncorpus.dtm.tfidf <- dtm(corpus, tfidf=TRUE)\n```\n\n## 4 算法分析\n\n```{r}\n# 1 表示sad 2表示sweet\nlabel <- c(rep(1L,764), rep(2L, 861))\nlable <- factor(label)\n#  从伤感歌词中挑选64首作为测试集，同理甜蜜类挑选61首作为测试集\nsad.test <- sample(1:764, 64, replace= FALSE)\nsweet.test <-sample(765:1625,61,replace= FALSE)\ntest <- c(sad.test,sweet.test)\ntrainSize <- 1:1625\ntrainSize <- trainSize[-test]\n\n```\n\n\n\n### 4.1 建立容器\n一个容器的要输入的参数有：\n\n+ `Document-term matrix`\n+ label，给每个样本打上label\n+ 训练集的范围\n+ 测试集的范围\n\n```{r}\n# create a container\ncontainer.song <- create_container(corpus.dtm.tfidf, label,trainSize=trainSize, testSize=test, virgin=FALSE)\n```\n\n### 4.2 训练模型\n\n```{r}\nTREE.song <- train_model(container.song, \"TREE\")\nSVM.song <- train_model(container.song, \"SVM\")\nMAXENT.song <- train_model(container.song, \"MAXENT\")\nRF.song <- train_model(container.song, \"RF\")\n\nSLDA.song <- train_model(container.song, \"SLDA\")\nBOOSTING.song <- train_model(container.song, \"BOOSTING\")\nBAGGING.song <- train_model(container.song, \"BAGGING\")\n\n```\n\n### 4.3 使用训练好的分类器，分类测试集\n\n```{r}\nSVM_CLASSIFY.song <- classify_model(container.song, SVM.song)\nTREE_CLASSIFY.song <- classify_model(container.song, TREE.song)\nMAXENT_CLASSIFY.song <- classify_model(container.song, MAXENT.song)\n\nRF_CLASSIFY.song <- classify_model(container.song, RF.song)\nSLDA_CLASSIFY.song <- classify_model(container.song, SLDA.song)\nBOOSTING_CLASSIFY <- classify_model(container.song, BOOSTING.song)\nBAGGING_CLASSIFY <- classify_model(container.song, BAGGING.song)\n\n```\n\n### 4.4 各个分类器分类结果合成\n\n```{r}\n\nCLASSIFY.song <- cbind(SVM_CLASSIFY.song,MAXENT_CLASSIFY.song,TREE_CLASSIFY.song, RF_CLASSIFY.song,BOOSTING_CLASSIFY,BAGGING_CLASSIFY)\n```\n\n### 4.5 分析\n\n\n```{r}\nanalytics.song <- create_analytics(container.song,CLASSIFY.song)\nanalytics.song\nnewdata <- subset(analytics.song@document_summary, select=c(SVM_LABEL, FORESTS_LABEL, MANUAL_CODE, CONSENSUS_CODE))\ntable(newdata$MANUAL_CODE, newdata$SVM_LABEL)\n```\n\n\n\n\n\n\n\n## 5 特征提取\n\n随机森林算法选取前100个重要的词语，`subset`即是前100有重要分类信息的词语\n\n```{r}\n# 转为data frame\ncorpus.df <- as.data.frame(inspect(corpus.dtm.tfidf))\n# 标注标签\nlabel <- c(rep(\"sad\",764), rep(\"sweet\",861))\nlabel <- factor(label)\ncorpus.df$label <- label\n# 不然会有重复行的错误\nrownames(corpus.df)<- 1:1625\n\nweights.rf <- random.forest.importance(label~., corpus.df, 1)\nsubset <- cutoff.k(weights.rf, 100)\nsubset\n```\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1390374277208.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "842383827",
    "id" : "1B718F69",
    "lastKnownWriteTime" : 1390397500,
    "path" : "~/Dropbox/project/Rcode/classifyMusic/readme.Rmd",
    "project_path" : "readme.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}